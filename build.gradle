
plugins {
    id "com.gradle.plugin-publish" version "0.9.10"
    id "io.codearte.nexus-staging" version "0.11.0"
    id "org.xbib.gradle.plugin.asciidoctor" version "1.6.0.1"
}

apply plugin: 'java-gradle-plugin'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: "com.gradle.plugin-publish"
apply plugin: 'org.xbib.gradle.plugin.asciidoctor'

task banner {
    doFirst {
        printf "Host: %s\nOS: %s %s %s\nJVM: %s %s %s %s\nGradle: %s Groovy: %s Java: %s\n" +
                "Build: group: ${project.group} name: ${project.name} version: ${project.version}\n",
                InetAddress.getLocalHost(),
                System.getProperty("os.name"),
                System.getProperty("os.arch"),
                System.getProperty("os.version"),
                System.getProperty("java.version"),
                System.getProperty("java.vm.version"),
                System.getProperty("java.vm.vendor"),
                System.getProperty("java.vm.name"),
                gradle.gradleVersion,
                GroovySystem.getVersion(),
                JavaVersion.current()
        if (!JavaVersion.current().java11Compatible) {
            println "WARNING: no Java 11 found. You will run into problems."
        }
    }
}

tasks.compileJava.dependsOn('banner')

configurations {
    wagon
}

dependencies {
    compileOnly gradleApi()
    compileOnly "org.codehaus.groovy:groovy-all:${project.property('groovy.version')}"
    compile "org.ow2.asm:asm:${project.property('asm.version')}"
    compile "org.ow2.asm:asm-commons:${project.property('asm.version')}"
    compile "org.ow2.asm:asm-util:${project.property('asm.version')}"

    testCompile gradleTestKit()
    testCompile "org.codehaus.groovy:groovy-all:${project.property('groovy.version')}"
    testCompile("org.spockframework:spock-core:${project.property('spock.version')}") {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    wagon "org.apache.maven.wagon:wagon-ssh:${project.property('wagon.version')}"
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

groovydoc {
    docTitle = description
}

task groovydocJar(type: Jar, dependsOn: 'groovydoc') {
    from groovydoc.destinationDir
    classifier = 'javadoc' // for sonatype validation
}

artifacts {
    archives sourcesJar, groovydocJar
}


asciidoctor {
    sourceDir = new File("$rootDir/src/docs/asciidoc")
    sources {
        include 'index.adoc'
    }
    backends = ['html5']
    attributes 'toc': 'left',
            'source-highlighter': 'coderay',
            'icons': 'font',
            'numbered': '',
            'idprefix': '',
            'docinfo1': 'true'
    resources {
        from project.tasks.groovydoc {
            into 'api'
        }
    }
    inputs.files project.sourceSets.test.allSource
}

if (project.hasProperty('gradle.publish.key')) {
    pluginBundle {
        website = 'https://github.com/jprante/gradle-plugin-shadow'
        vcsUrl = 'https://github.com/jprante/gradle-plugin-shadow'
        plugins {
            shadowPlugin {
                id = 'org.xbib.gradle.plugin.shadow'
                version = project.version
                description = 'Shadow plugin for Gradle'
                displayName = 'Shadow plugin for Gradle'
                tags = ['gradle', 'plugin', 'shadow']
            }
        }
    }
}

task xbibUpload(type: Upload, dependsOn: build) {
    group = 'publish'
    configuration = configurations.archives
    uploadDescriptor = true
    repositories {
        if (project.hasProperty('xbibUsername')) {
            mavenDeployer {
                configuration = configurations.wagon
                repository(url: uri(project.property('xbibUrl'))) {
                    authentication(userName: xbibUsername, privateKey: xbibPrivateKey)
                }
            }
        }
    }
}

task sonatypeUpload(type: Upload, dependsOn: build) {
    group = 'publish'
    configuration = configurations.archives
    uploadDescriptor = true
    repositories {
        if (project.hasProperty('ossrhUsername')) {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: uri(ossrhReleaseUrl)) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                snapshotRepository(url: uri(ossrhSnapshotUrl)) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                pom.project {
                    groupId project.group
                    artifactId project.name
                    version project.version
                    name project.name
                    description 'Shadow plugin for Gradle'
                    packaging 'jar'
                    inceptionYear '2018'
                    url "https://github.com/jprante/gradle-plugin-shadow"
                    organization {
                        name 'xbib'
                        url 'http://xbib.org'
                    }
                    developers {
                        developer {
                            id 'jprante'
                            name 'JÃ¶rg Prante'
                            email 'joergprante@gmail.com'
                            url 'https://github.com/jprante'
                        }
                    }
                    scm {
                        url "https://github.com/jprante/gradle-plugin-shadow"
                        connection "scm:git:git://github.com/jprante/gradle-plugin-shadow.git"
                        developerConnection "scm:git:git://github.com/jprante/gradle-plugin-shadow.git"
                    }
                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                }
            }
        }
    }
}

nexusStaging {
    packageGroup = "org.xbib"
}
